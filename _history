{"entries":[{"timestamp":1745828789752,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"namespace GP2Y1051 {\" line1=\"\" line2=\"    let init = false\" line3=\"\" line4=\"    //% blockId=&quot;setSerial&quot; block=&quot;set Sharp GP2Y1051 to %pin&quot;\" line5=\"    //% weight=100 blockGap=20 blockInlineInputs=true\" line6=\"    export function setSerial(pin: SerialPin): void {\" line7=\"        basic.pause(300)\" line8=\"        serial.redirect(\" line9=\"            SerialPin.USB_TX,\" line10=\"            pin,\" line11=\"            BaudRate.BaudRate2400\" line12=\"        )\" line13=\"        init = true\" line14=\"    }\" line15=\"\" line16=\"\" line17=\"    //% blockId=&quot;getData&quot; block=&quot;the data of PM2.5(ug/m3)&quot;\" line18=\"    //% weight=90 blockGap=20 blockInlineInputs=true   \" line19=\"    export function getData(): number {\" line20=\"        let myData = 0\" line21=\"        if (init) {\" line22=\"            let myNum = 0\" line23=\"            let myArr: number[] = [0, 0, 0, 0, 0, 0]\" line24=\"            let temp: Buffer\" line25=\"            myNum = serial.readBuffer(1).getNumber(NumberFormat.UInt8BE, 0)\" line26=\"            while (myData == 0) {\" line27=\"                while (myNum != 170) {\" line28=\"                    myNum = serial.readBuffer(1).getNumber(NumberFormat.UInt8BE, 0)\" line29=\"                }\" line30=\"                temp = serial.readBuffer(6)\" line31=\"                for (let i = 0; i &lt; 6; i++) {\" line32=\"                    myArr[i] = temp.getNumber(NumberFormat.UInt8BE, i)\" line33=\"                }\" line34=\"                if (myArr[5] == 255 &amp;&amp; (myArr[0] + myArr[1] + myArr[2] + myArr[3]) == myArr[4]) {\" line35=\"                    myData = checkPM25(myArr)\" line36=\"                }\" line37=\"                else {\" line38=\"                    myArr = [0, 0, 0, 0, 0, 0]\" line39=\"                }\" line40=\"            }\" line41=\"        }\" line42=\"        return Math.round(myData)\" line43=\"    }\" line44=\"\" line45=\"\" line46=\"    function checkPM25(tempArr: number[]): number {\" line47=\"        let vo = ((tempArr[0] * 256 + tempArr[1]) * 2.5) / 1024;\" line48=\"        let c = 0;\" line49=\"        if (vo &lt; 0.045)\" line50=\"            c = vo * 200;\" line51=\"        else if (vo &lt; 0.048)\" line52=\"            c = vo * 400;\" line53=\"        else if (vo &lt; 0.051)\" line54=\"            c = vo * 600;\" line55=\"        else if (vo &lt; 0.054)\" line56=\"            c = vo * 750;\" line57=\"        else if (vo &lt; 0.058)\" line58=\"            c = vo * 900;\" line59=\"        else if (vo &lt; 0.064)\" line60=\"            c = vo * 1000;\" line61=\"        else if (vo &lt; 0.070)\" line62=\"            c = vo * 1250;\" line63=\"        else if (vo &lt; 0.075)\" line64=\"            c = vo * 1400;\" line65=\"        else if (vo &lt; 0.080)\" line66=\"            c = vo * 1700;\" line67=\"        else if (vo &lt; 0.085)\" line68=\"            c = vo * 1800;\" line69=\"        else if (vo &lt; 0.090)\" line70=\"            c = vo * 1900;\" line71=\"        else if (vo &lt; 0.1)\" line72=\"            c = vo * 2000;\" line73=\"        else if (vo &lt; 0.110)\" line74=\"            c = vo * 2200;\" line75=\"        else if (vo &gt; 0.110)\" line76=\"            c = vo * 3000;\" line77=\"        return c\" line78=\"    }\" line79=\"}\" numlines=\"80\"></mutation></block></statement></block>"],[1,"://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n"],[0,"</xm"]],"start1":12,"start2":12,"length1":3444,"length2":113}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"namespace GP2Y1051 {\n\n    let init = false\n\n    //% blockId=\"setSerial\" block=\"set Sharp GP2Y1051 to %pin\"\n    //% weight=100 blockGap=20 blockInlineInputs=true\n    export function setSerial(pin: SerialPin): void {\n        basic.pause(300)\n        serial.redirect(\n            SerialPin.USB_TX,\n            pin,\n            BaudRate.BaudRate2400\n        )\n        init = true\n    }\n\n\n    //% blockId=\"getData\" block=\"the data of PM2.5(ug/m3)\"\n    //% weight=90 blockGap=20 blockInlineInputs=true   \n    export function getData(): number {\n        let myData = 0\n        if (init) {\n            let myNum = 0\n            let myArr: number[] = [0, 0, 0, 0, 0, 0]\n            let temp: Buffer\n            myNum = serial.readBuffer(1).getNumber(NumberFormat.UInt8BE, 0)\n            while (myData == 0) {\n                while (myNum != 170) {\n                    myNum = serial.readBuffer(1).getNumber(NumberFormat.UInt8BE, 0)\n                }\n                temp = serial.readBuffer(6)\n                for (let i = 0; i < 6; i++) {\n                    myArr[i] = temp.getNumber(NumberFormat.UInt8BE, i)\n                }\n                if (myArr[5] == 255 && (myArr[0] + myArr[1] + myArr[2] + myArr[3]) == myArr[4]) {\n                    myData = checkPM25(myArr)\n                }\n                else {\n                    myArr = [0, 0, 0, 0, 0, 0]\n                }\n            }\n        }\n        return Math.round(myData)\n    }\n\n\n    function checkPM25(tempArr: number[]): number {\n        let vo = ((tempArr[0] * 256 + tempArr[1]) * 2.5) / 1024;\n        let c = 0;\n        if (vo < 0.045)\n            c = vo * 200;\n        else if (vo < 0.048)\n            c = vo * 400;\n        else if (vo < 0.051)\n            c = vo * 600;\n        else if (vo < 0.054)\n            c = vo * 750;\n        else if (vo < 0.058)\n            c = vo * 900;\n        else if (vo < 0.064)\n            c = vo * 1000;\n        else if (vo < 0.070)\n            c = vo * 1250;\n        else if (vo < 0.075)\n            c = vo * 1400;\n        else if (vo < 0.080)\n            c = vo * 1700;\n        else if (vo < 0.085)\n            c = vo * 1800;\n        else if (vo < 0.090)\n            c = vo * 1900;\n        else if (vo < 0.1)\n            c = vo * 2000;\n        else if (vo < 0.110)\n            c = vo * 2200;\n        else if (vo > 0.110)\n            c = vo * 3000;\n        return c\n    }\n}"],[0,"\n"]],"start1":0,"start2":0,"length1":2369,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"\": \""],[-1,"GP2Y1051\",\n    \"version\": \"0.0.1\",\n    \"description\": \"這是專為micro:bit提供的PM2.5感應積木(This is the blocks for Sharp GP2Y1051 to measure the concentration of PM2.5)\",\n    \"license\": \"MIT"],[1,"PM2.5 Sensor\",\n    \"description\": \""],[0,"\",\n "]],"start1":11,"start2":11,"length1":187,"length2":43},{"diffs":[[0,"\": \"*\",\n"],[1,"        \"radio\": \"*\",\n"],[0,"        "]],"start1":88,"start2":88,"length1":16,"length2":38},{"diffs":[[0,"   \""],[-1,"README.md"],[1,"main.blocks"],[0,"\",\n "]],"start1":171,"start2":171,"length1":17,"length2":19},{"diffs":[[0,"   \""],[-1,"GP2Y1051-strings.json\"\n    ],\n    \"public\": true,\n    \"preferredEditor\": \"tsprj\""],[1,"README.md\"\n    ],\n    \"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":213,"start2":213,"length1":87,"length2":54}]}]},{"timestamp":1745829436014,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0," x=\""],[1,"2"],[0,"0\" y=\""],[1,"2"],[0,"0\"><"]],"start1":104,"start2":104,"length1":14,"length2":16}]}]},{"timestamp":1745829677833,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"iables><"],[1,"block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"namespace GP2Y1051 {\" line1=\"\" line2=\"    let init = false\" line3=\"\" line4=\"    //% blockId=&quot;setSerial&quot; block=&quot;set Sharp GP2Y1051 to %pin&quot;\" line5=\"    //% weight=100 blockGap=20 blockInlineInputs=true\" line6=\"    export function setSerial(pin: SerialPin): void {\" line7=\"        basic.pause(300)\" line8=\"        serial.redirect(\" line9=\"            SerialPin.USB_TX,\" line10=\"            pin,\" line11=\"            BaudRate.BaudRate2400\" line12=\"        )\" line13=\"        init = true\" line14=\"    }\" line15=\"\" line16=\"\" line17=\"    //% blockId=&quot;getData&quot; block=&quot;the data of PM2.5(ug/m3)&quot;\" line18=\"    //% weight=90 blockGap=20 blockInlineInputs=true   \" line19=\"    export function getData(): number {\" line20=\"        let myData = 0\" line21=\"        if (init) {\" line22=\"            let myNum = 0\" line23=\"            let myArr: number[] = [0, 0, 0, 0, 0, 0]\" line24=\"            let temp: Buffer\" line25=\"            myNum = serial.readBuffer(1).getNumber(NumberFormat.UInt8BE, 0)\" line26=\"            while (myData == 0) {\" line27=\"                while (myNum != 170) {\" line28=\"                    myNum = serial.readBuffer(1).getNumber(NumberFormat.UInt8BE, 0)\" line29=\"                }\" line30=\"                temp = serial.readBuffer(6)\" line31=\"                for (let i = 0; i &lt; 6; i++) {\" line32=\"                    myArr[i] = temp.getNumber(NumberFormat.UInt8BE, i)\" line33=\"                }\" line34=\"                if (myArr[5] == 255 &amp;&amp; (myArr[0] + myArr[1] + myArr[2] + myArr[3]) == myArr[4]) {\" line35=\"                    myData = checkPM25(myArr)\" line36=\"                }\" line37=\"                else {\" line38=\"                    myArr = [0, 0, 0, 0, 0, 0]\" line39=\"                }\" line40=\"            }\" line41=\"        }\" line42=\"        return Math.round(myData)\" line43=\"    }\" line44=\"\" line45=\"\" line46=\"    function checkPM25(tempArr: number[]): number {\" line47=\"        let vo = ((tempArr[0] * 256 + tempArr[1]) * 2.5) / 1024;\" line48=\"        let c = 0;\" line49=\"        if (vo &lt; 0.045)\" line50=\"            c = vo * 200;\" line51=\"        else if (vo &lt; 0.048)\" line52=\"            c = vo * 400;\" line53=\"        else if (vo &lt; 0.051)\" line54=\"            c = vo * 600;\" line55=\"        else if (vo &lt; 0.054)\" line56=\"            c = vo * 750;\" line57=\"        else if (vo &lt; 0.058)\" line58=\"            c = vo * 900;\" line59=\"        else if (vo &lt; 0.064)\" line60=\"            c = vo * 1000;\" line61=\"        else if (vo &lt; 0.070)\" line62=\"            c = vo * 1250;\" line63=\"        else if (vo &lt; 0.075)\" line64=\"            c = vo * 1400;\" line65=\"        else if (vo &lt; 0.080)\" line66=\"            c = vo * 1700;\" line67=\"        else if (vo &lt; 0.085)\" line68=\"            c = vo * 1800;\" line69=\"        else if (vo &lt; 0.090)\" line70=\"            c = vo * 1900;\" line71=\"        else if (vo &lt; 0.1)\" line72=\"            c = vo * 2000;\" line73=\"        else if (vo &lt; 0.110)\" line74=\"            c = vo * 2200;\" line75=\"        else if (vo &gt; 0.110)\" line76=\"            c = vo * 3000;\" line77=\"        return c\" line78=\"    }\" line79=\"}\" numlines=\"80\"></mutation></block></statement></block><"],[0,"/xml>"]],"start1":71,"start2":71,"length1":13,"length2":3385}]}]},{"timestamp":1745830893282,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":363,"start2":363,"length1":52,"length2":8}]},{"type":"added","filename":"test.ts","value":"// 在這裡測試；當此封包作為擴充功能時，將不會編譯此內容。\n"}]}],"snapshots":[{"timestamp":1745828789751,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"PM2.5 Sensor\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1745830893282,"editorVersion":"7.0.61","text":{"README.md":"","main.ts":"namespace GP2Y1051 {\n\n    let init = false\n\n    //% blockId=\"setSerial\" block=\"set Sharp GP2Y1051 to %pin\"\n    //% weight=100 blockGap=20 blockInlineInputs=true\n    export function setSerial(pin: SerialPin): void {\n        basic.pause(300)\n        serial.redirect(\n            SerialPin.USB_TX,\n            pin,\n            BaudRate.BaudRate2400\n        )\n        init = true\n    }\n\n\n    //% blockId=\"getData\" block=\"the data of PM2.5(ug/m3)\"\n    //% weight=90 blockGap=20 blockInlineInputs=true   \n    export function getData(): number {\n        let myData = 0\n        if (init) {\n            let myNum = 0\n            let myArr: number[] = [0, 0, 0, 0, 0, 0]\n            let temp: Buffer\n            myNum = serial.readBuffer(1).getNumber(NumberFormat.UInt8BE, 0)\n            while (myData == 0) {\n                while (myNum != 170) {\n                    myNum = serial.readBuffer(1).getNumber(NumberFormat.UInt8BE, 0)\n                }\n                temp = serial.readBuffer(6)\n                for (let i = 0; i < 6; i++) {\n                    myArr[i] = temp.getNumber(NumberFormat.UInt8BE, i)\n                }\n                if (myArr[5] == 255 && (myArr[0] + myArr[1] + myArr[2] + myArr[3]) == myArr[4]) {\n                    myData = checkPM25(myArr)\n                }\n                else {\n                    myArr = [0, 0, 0, 0, 0, 0]\n                }\n            }\n        }\n        return Math.round(myData)\n    }\n\n\n    function checkPM25(tempArr: number[]): number {\n        let vo = ((tempArr[0] * 256 + tempArr[1]) * 2.5) / 1024;\n        let c = 0;\n        if (vo < 0.045)\n            c = vo * 200;\n        else if (vo < 0.048)\n            c = vo * 400;\n        else if (vo < 0.051)\n            c = vo * 600;\n        else if (vo < 0.054)\n            c = vo * 750;\n        else if (vo < 0.058)\n            c = vo * 900;\n        else if (vo < 0.064)\n            c = vo * 1000;\n        else if (vo < 0.070)\n            c = vo * 1250;\n        else if (vo < 0.075)\n            c = vo * 1400;\n        else if (vo < 0.080)\n            c = vo * 1700;\n        else if (vo < 0.085)\n            c = vo * 1800;\n        else if (vo < 0.090)\n            c = vo * 1900;\n        else if (vo < 0.1)\n            c = vo * 2000;\n        else if (vo < 0.110)\n            c = vo * 2200;\n        else if (vo > 0.110)\n            c = vo * 3000;\n        return c\n    }\n}\n","GP2Y1051-strings.json":"{\n    \"GP2Y1051|block\": \"PM2.5\",\n    \"GP2Y1051.setSerial|block\": \"設定 GP2Y1051 連結到引腳 %pin\",\n    \"GP2Y1051.getData|block\": \"PM2.5濃度(ug/m3)\"\n}","pxt.json":"{\n    \"name\": \"GP2Y1051\",\n    \"version\": \"0.0.1\",\n    \"description\": \"這是專為micro:bit提供的PM2.5感應積木(This is the blocks for Sharp GP2Y1051 to measure the concentration of PM2.5)\",\n    \"license\": \"MIT\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"README.md\",\n        \"main.ts\",\n        \"GP2Y1051-strings.json\"\n    ],\n    \"public\": true,\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1745830893293}